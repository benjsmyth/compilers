instead expected token classes are [BOOL, INT, VOID]
instead expected token classes are [PLUS, MINUS, MULT, DIV, LESS, LESSEQ, GREATER, GREATEREQ, EQUAL, NEQUAL, OR, AND, ASSIGN, SEMICOLON, LPAREN, LBRACKET]
instead expected token classes are [error, SEMICOLON, LBRACKET]
instead expected token classes are [error, UMINUS, NOT, LPAREN, ID, NUM, TRUTH]
instead expected token classes are [UMINUS, NOT, SEMICOLON, LPAREN, LCURLY, RCURLY, IF, RETURN, WHILE, ID, NUM, TRUTH]
instead expected token classes are [PLUS, MINUS, MULT, DIV, LESS, LESSEQ, GREATER, GREATEREQ, EQUAL, NEQUAL, OR, AND, ASSIGN, COMMA, LPAREN, RPAREN, LBRACKET]
The abstract syntax tree is:
DecList
    FunctionDec
        CompoundExp
            ExpList
                IfExp:
                    OpExp
                        VarExp
                            SimpleVar
                                name: v
                        Operator: =
                        IntExp
                            value: 0
                    ReturnExp
                        VarExp
                            SimpleVar
                                name: u
                    ELSE
                    ReturnExp
                        CallExp
                            function name: gcd
                            ExpList
                                VarExp
                                    SimpleVar
                                        name: v
                                OpExp
                                    VarExp
                                        SimpleVar
                                            name: u
                                    Operator: -
                                    OpExp
                                        OpExp
                                            VarExp
                                                SimpleVar
                                                    name: u
                                            Operator: /
                                            VarExp
                                                SimpleVar
                                                    name: v
                                        Operator: *
                                        VarExp
                                            SimpleVar
                                                name: v
    FunctionDec
        CompoundExp
            VarDecList
                SimpleDec
                    name: z
                SimpleDec
                    NameTy
                        type: INT
                    name: x
            ExpList
                AssignExp
                    VarExp
                        SimpleVar
                            name: x
                    CallExp
                        function name: input
                CallExp
                    function name: output
                    ExpList
                        CallExp
                            function name: gcd
