/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
import java_cup.runtime.Symbol;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
	    if (s.value != null) 
         m.append(String.format(" at `%s'", s.value));
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : " + message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;
:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal PLUS, UMINUS, MINUS, MULT, DIV,
         LESS, LESSEQ, GREATER, GREATEREQ, EQUAL, NEQUAL,
         NOT, OR, AND, ASSIGN, SEMICOLON, COMMA,
         LPAREN, RPAREN, LBRACKET, RBRACKET, LCURLY, RCURLY;           
terminal BOOL, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal String ID, NUM, TRUTH;
terminal ERROR;

non terminal DecList program, declaration_list;
non terminal Dec declaration;
non terminal VarDec var_declaration;
non terminal FunctionDec fun_declaration, fun_prototype;
non terminal NameTy type_specifier;
non terminal VarDecList params, local_declarations, param_list;
non terminal CompoundExp compound_stmt;
non terminal VarDec param;
non terminal Exp statement, expression_stmt, expression, simple_expression, additive_expression,
                 obool_expression, abool_expression, ubool_expression, factor, signed_factor, term;
non terminal IfExp selection_stmt;
non terminal WhileExp iteration_stmt;
non terminal ReturnExp return_stmt;
non terminal Var var;
non terminal OpExp relop, addop, mulop;
non terminal CallExp call;
non terminal ExpList args, statement_list, arg_list;
non terminal error_token;

precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUAL, NEQUAL;
precedence left OR; 
precedence left AND;
precedence left NOT;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left UMINUS;
precedence left IF, ELSE; 

/* ----------------------------Grammar Section-------------------- */
   
start with program;

program ::= declaration_list:dl
           {: RESULT = dl; :}
		| error_token:et
      |
;

declaration_list ::= declaration_list:dl declaration:d
           {:
              DecList t = dl;
              while(t.tail != null)
                t = t.tail;
              t.tail = new DecList(d, null);
              RESULT = dl;
           :}
	        | declaration:d
           {: RESULT = new DecList(d, null); :}
;

declaration ::= var_declaration:v
           {: RESULT = v; :}
		| fun_declaration:fd
           {: RESULT = fd; :}
		| fun_prototype:fp
           {: RESULT = fp; :}
;

var_declaration ::= type_specifier:t ID:name SEMICOLON
           {: RESULT = new SimpleDec(tleft, tright, t, name); :}
		| type_specifier:t ID:name LBRACKET NUM:n RBRACKET SEMICOLON
           {: RESULT = new ArrayDec(tleft, tright, t, name, Integer.parseInt(n)); :}
		| type_specifier:t ID:name LBRACKET NUM:n RBRACKET error:e
	   {: report_error("Missing semicolon at line ", e); :}
		| type_specifier:t ID:name LBRACKET NUM:n error:e
	   {: report_error("Missing closing bracket", e); :}
		| type_specifier:t ID:name LBRACKET error:e
	   {: report_error("Invalid array access", e); :}
		| type_specifier:t ID:name error:e
	   {: report_error("Missing semicolon", e); :}
;

type_specifier ::= BOOL:b 
           {: RESULT = new NameTy(bleft, bright, NameTy.BOOL); :}
		| INT:i
           {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
		| VOID:v
           {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
;

fun_declaration ::= type_specifier:t ID:name LPAREN params:p RPAREN compound_stmt:c 
           {: RESULT = new FunctionDec(tleft, tright, t, name, p, c); :}
;

fun_prototype ::= type_specifier:t ID:name LPAREN params:p RPAREN SEMICOLON 
           {: RESULT = new FunctionDec(tleft, tright, t, name, p, new NilExp(pright, pleft)); :}
		| type_specifier:t ID:name LPAREN params:p RPAREN error:e
	   {: report_error("Missing semicolon", e); :}
		| type_specifier:t ID:name LPAREN error:e
	   {: report_error("Invalid function prototype", e); :}
;

params ::= param_list:p 
           {: RESULT = p; :}
		| VOID:v
		| error:e
	   {: report_error("Invalid parameter list", e); :}
;

param_list ::= param_list:pl COMMA param:p 
           {:
               VarDecList t = pl;
               while( t.tail != null )
                  t = t.tail;
               t.tail = new VarDecList(p, null);
               RESULT = pl;
           :}
		| param:p
           {: RESULT = new VarDecList(p, null); :}
;

param ::= type_specifier:t ID:name 
           {: RESULT = new SimpleDec(tleft, tright, t, name); :}
		| type_specifier:t ID:name LBRACKET RBRACKET
           {: RESULT = new ArrayDec(tleft, tright, t, name, 0); :}
;

compound_stmt ::= LCURLY:l local_declarations:ld statement_list:sd RCURLY 
           {: RESULT = new CompoundExp(lleft, lright, ld, sd); :}
;

local_declarations ::= local_declarations:d1 var_declaration:d2
           {:
              if (d1 != null) {
                VarDecList t = d1;
                while( t.tail != null )
                  t = t.tail;
                t.tail = new VarDecList(d2, null);
                RESULT = d1;
              }
              else {
                RESULT = new VarDecList(d2, null);
              }
           :}
		| {: //placeholder for epsilon transition :}
;

statement_list ::= statement_list:s1 statement:s2 
           {:
              if (s1 != null) {
                ExpList t = s1;
                while( t.tail != null )
                  t = t.tail;
                t.tail = new ExpList(s2, null);
                RESULT = s1;
              }
              else {
                RESULT = new ExpList(s2, null);
              }
           :}
		| {: //placeholder for epsilon transition :}
;

statement ::= expression_stmt:e
           {: RESULT = e; :}
                | compound_stmt:c
           {: RESULT = c; :}
		| selection_stmt:s
           {: RESULT = s; :}
		| iteration_stmt:i
           {: RESULT = i; :}
		| return_stmt:r
           {: RESULT = r; :}
;

expression_stmt ::= expression:e SEMICOLON 
           {: RESULT = e; :}
                | SEMICOLON:s
           {: RESULT = new NilExp(sleft, sright); :}
;

selection_stmt ::= IF:i LPAREN expression:e RPAREN statement:s
           {: RESULT = new IfExp(ileft, iright, e, s, null); :}
		| IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
           {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
;

iteration_stmt ::= WHILE:w LPAREN expression:e RPAREN statement:s 
           {: RESULT = new WhileExp(wleft, wright, e, s); :}
;

return_stmt ::= RETURN:r expression:e SEMICOLON 
           {: RESULT = new ReturnExp(rleft, rright, e); :}
		| RETURN:r SEMICOLON:s
           {: RESULT = new ReturnExp(rleft, rright, new NilExp(rright, sleft)); :}
		| RETURN:r error:e
	   {: report_error("Missing semicolon", e); :}
;

expression ::= var:v ASSIGN expression:e
           {: RESULT = new AssignExp(vleft, vright, new VarExp(vleft, vright, v), e); :}  
		| obool_expression:o
           {: RESULT = o; :}
;

var ::= ID:i
           {: RESULT = new SimpleVar(ileft, iright, i); :}
		| ID:i LBRACKET expression:e RBRACKET
           {: RESULT = new IndexVar(ileft, iright, i, e); :}
;

obool_expression ::= obool_expression:o OR abool_expression:a
           {: RESULT = new OpExp(oleft, oright, o, OpExp.OR, a); :}
		| abool_expression:a
           {: RESULT = a; :}
;

abool_expression ::= abool_expression:a1 AND abool_expression:a2
           {: RESULT = new OpExp(a1left, a2right, a1, OpExp.AND, a2); :}
		| ubool_expression:u
           {: RESULT = u; :}
;

ubool_expression ::= NOT ubool_expression:u
           {: RESULT = new OpExp(uleft, uright, u, OpExp.NOT, null); :}
		| simple_expression:s
           {: RESULT = s; :}
;

simple_expression ::= additive_expression:a1 relop:r additive_expression:a2
           {: RESULT = new OpExp(a1left, a1right, a1, r.op, a2); :}
		| additive_expression:a
           {: RESULT = a; :}
;

relop ::= LESSEQ:le
           {: RESULT = new OpExp(leleft, leright, null, OpExp.LESSEQ, null); :}     
	        | LESS:l
           {: RESULT = new OpExp(lleft, lright, null, OpExp.LESS, null); :}
	        | GREATER:g
           {: RESULT = new OpExp(gleft, gright, null, OpExp.GREATER, null); :}
	        | GREATEREQ:ge
           {: RESULT = new OpExp(geleft, geright, null, OpExp.GREATEREQ, null); :}
	        | EQUAL:e
           {: RESULT = new OpExp(eleft, eright, null, OpExp.EQUAL, null); :}
	        | NEQUAL:n
           {: RESULT = new OpExp(nleft, nright, null, OpExp.NEQUAL, null); :}
;

additive_expression ::= additive_expression:e addop:a term:t
           {: RESULT = new OpExp(eleft, eright, e, a.op, t); :}
	        | term:t
           {: RESULT = t; :}
;

addop ::= PLUS:p 
           {: RESULT = new OpExp(pleft, pright, null, OpExp.PLUS, null); :}
	        | MINUS:m
           {: RESULT = new OpExp(mleft, mright, null, OpExp.MINUS, null); :}
		| error:ae
	   {: report_error("Addition error", ae); :}
;

term ::= term:t mulop:m signed_factor:s
           {: RESULT = new OpExp(tleft, tright, t, m.op, s); :}
	        | signed_factor:s
           {: RESULT = s; :}
;

mulop ::= MULT:m
           {: RESULT = new OpExp(mleft, mright, null, OpExp.MULT, null); :}
	        | DIV:d
           {: RESULT = new OpExp(dleft, dright, null, OpExp.DIV, null); :}
;

signed_factor ::= UMINUS signed_factor:s
           {: RESULT = new OpExp(sleft, sright, s, OpExp.UMINUS, null); :}
	        | factor:f
           {: RESULT = f; :}
;

factor ::= LPAREN expression:e RPAREN
           {: RESULT = e; :}
		| var:v
           {: RESULT = new VarExp(vleft, vright, v); :}
		| call:c
           {: RESULT = c; :}
		| NUM:n
           {: RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); :}
		| TRUTH:t
           {:
              if (t.equals("true"))
                RESULT = new BoolExp(tleft, tright, true); 
              else if (t.equals("false"))
                RESULT = new BoolExp(tleft, tright, false); 
           :}
;

call ::= ID:i LPAREN args:a RPAREN 
           {: RESULT = new CallExp(ileft, iright, i, a); :}
;

args ::= arg_list:a
           {: RESULT = a; :}
	        | {: //placeholder for epsilon transition :}
;

arg_list ::= arg_list:a COMMA expression:e
           {:
              ExpList t = a;
              while(t.tail != null) t = t.tail;
              t.tail = new ExpList(e, null);
              RESULT = a;
           :}
		| expression:e
           {: RESULT = new ExpList(e, null); :}
;

error_token ::= ERROR {: report_error("Illegal character", null); :}
;
